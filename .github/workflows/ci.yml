name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff linter
        run: ruff check .

      - name: Run Ruff formatter check
        run: ruff format --check .

  type-check:
    name: Type Checking (Mypy)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy

      - name: Run Mypy
        run: python -m mypy database/ utils/ --ignore-missing-imports

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run Bandit security scanner
        run: python -m bandit -r . -c pyproject.toml

      - name: Run Safety dependency vulnerability scanner
        run: python -m safety check --json
        continue-on-error: true

      - name: Check for secrets in code
        run: |
          # Search for potential hardcoded credentials
          if git grep -E "(password|secret|api_key|token)\s*=\s*['\"][^'\"]{5,}['\"]" -- '*.py' '*.yaml' '*.sql'; then
            echo "ERROR: Found potential hardcoded credentials!"
            exit 1
          fi
          echo "No hardcoded credentials detected"

  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run documentation validation
        run: |
          python scripts/validate_docs.py

      - name: Check for broken internal links
        run: |
          python scripts/fix_docs.py --dry-run

  test:
    name: Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.12', '3.13']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -n auto
        continue-on-error: true

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-precog
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            test_results/
            htmlcov/
            coverage.xml

  validate-quick:
    name: Quick Validation Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff mypy pytest

      - name: Run quick validation script
        run: bash scripts/validate_quick.sh

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, security-scan, documentation-validation, test, validate-quick]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Documentation Validation: ${{ needs.documentation-validation.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Quick Validation: ${{ needs.validate-quick.result }}"

          if [[ "${{ needs.lint-and-format.result }}" == "failure" ]] || \
             [[ "${{ needs.type-check.result }}" == "failure" ]] || \
             [[ "${{ needs.security-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.documentation-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-quick.result }}" == "failure" ]]; then
            echo "CI FAILED: One or more checks failed"
            exit 1
          fi

          echo "CI PASSED: All checks successful!"
