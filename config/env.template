# Precog Environment Configuration Template
# Copy this file to .env and fill in your actual values
# NEVER commit .env to git - only env.template

# ============================================================================
# ENVIRONMENT CONTROL (⚠️ CHANGE THIS TO SWITCH ENVIRONMENTS)
# ============================================================================

# Current active environment
# Options: development, staging, production, test
# Default: development (safest option)
ENVIRONMENT=development

# ============================================================================
# DEVELOPMENT ENVIRONMENT (Local Development & Testing)
# ============================================================================

# PostgreSQL Database - Development
DEV_DB_HOST=localhost
DEV_DB_PORT=5432
DEV_DB_NAME=precog_dev
DEV_DB_USER=postgres
DEV_DB_PASSWORD=your_dev_db_password

# Kalshi API - Development (Demo/Sandbox)
DEV_KALSHI_API_KEY=your_demo_kalshi_api_key
DEV_KALSHI_PRIVATE_KEY_PATH=_keys/kalshi_demo_private.pem
DEV_KALSHI_BASE_URL=https://demo-api.kalshi.co

# ESPN API - Development
DEV_ESPN_API_BASE=https://site.api.espn.com/apis/site/v2

# BallDontLie API - Development (Phase 6)
DEV_BALLDONTLIE_API_KEY=your_balldontlie_api_key
DEV_BALLDONTLIE_BASE_URL=https://api.balldontlie.io/v1

# Development Settings
DEV_LOG_LEVEL=DEBUG
DEV_DEBUG_MODE=True
DEV_MOCK_API_MODE=False
DEV_PAPER_TRADING_MODE=True
DEV_PAPER_TRADING_BALANCE=10000

# Development Risk Limits (Conservative)
DEV_MAX_POSITION_SIZE=1000
DEV_MAX_TOTAL_EXPOSURE=10000
DEV_DAILY_LOSS_LIMIT=500

# ============================================================================
# STAGING ENVIRONMENT (Pre-Production Validation)
# ============================================================================

# PostgreSQL Database - Staging
STAGING_DB_HOST=staging-db.example.com  # Update with actual staging DB host
STAGING_DB_PORT=5432
STAGING_DB_NAME=precog_staging
STAGING_DB_USER=staging_user
STAGING_DB_PASSWORD=your_staging_db_password

# Kalshi API - Staging (Still Demo, but separate credentials)
STAGING_KALSHI_API_KEY=your_staging_kalshi_api_key
STAGING_KALSHI_PRIVATE_KEY_PATH=_keys/kalshi_staging_private.pem
STAGING_KALSHI_BASE_URL=https://demo-api.kalshi.co

# ESPN API - Staging
STAGING_ESPN_API_BASE=https://site.api.espn.com/apis/site/v2

# BallDontLie API - Staging (Phase 6)
STAGING_BALLDONTLIE_API_KEY=your_staging_balldontlie_api_key
STAGING_BALLDONTLIE_BASE_URL=https://api.balldontlie.io/v1

# Staging Settings
STAGING_LOG_LEVEL=INFO
STAGING_DEBUG_MODE=False
STAGING_MOCK_API_MODE=False
STAGING_PAPER_TRADING_MODE=True  # ALWAYS paper trade in staging
STAGING_PAPER_TRADING_BALANCE=50000  # Larger balance for stress testing

# Staging Risk Limits (More realistic)
STAGING_MAX_POSITION_SIZE=500
STAGING_MAX_TOTAL_EXPOSURE=5000
STAGING_DAILY_LOSS_LIMIT=250

# ============================================================================
# PRODUCTION ENVIRONMENT (⚠️⚠️⚠️ LIVE TRADING - EXTREME CAUTION ⚠️⚠️⚠️)
# ============================================================================

# ⚠️ ONLY USE AFTER:
# 1. Extensive paper trading validation (minimum 30 days)
# 2. Staging environment validation
# 3. Security audit completed
# 4. Risk management tested
# 5. Circuit breakers validated

# PostgreSQL Database - Production
PROD_DB_HOST=prod-db.example.com  # Update with actual production DB host
PROD_DB_PORT=5432
PROD_DB_NAME=precog_prod
PROD_DB_USER=prod_user
PROD_DB_PASSWORD=your_strong_prod_db_password  # Use strong password!

# Kalshi API - Production (⚠️ REAL MONEY)
PROD_KALSHI_API_KEY=your_production_kalshi_api_key
PROD_KALSHI_PRIVATE_KEY_PATH=_keys/kalshi_prod_private.pem
PROD_KALSHI_BASE_URL=https://trading-api.kalshi.com  # ⚠️ LIVE TRADING

# ESPN API - Production
PROD_ESPN_API_BASE=https://site.api.espn.com/apis/site/v2

# BallDontLie API - Production (Phase 6)
PROD_BALLDONTLIE_API_KEY=your_production_balldontlie_api_key
PROD_BALLDONTLIE_BASE_URL=https://api.balldontlie.io/v1

# Production Settings
PROD_LOG_LEVEL=WARNING  # Less verbose in production
PROD_DEBUG_MODE=False  # NEVER True in production
PROD_MOCK_API_MODE=False
PROD_PAPER_TRADING_MODE=False  # ⚠️ Live trading when False

# Production Risk Limits (⚠️ CONSERVATIVE - ADJUST BASED ON VALIDATION)
PROD_MAX_POSITION_SIZE=100  # Start VERY small
PROD_MAX_TOTAL_EXPOSURE=1000
PROD_DAILY_LOSS_LIMIT=50

# Production Circuit Breaker
PROD_CIRCUIT_BREAKER_ENABLED=True
PROD_MAX_API_FAILURES=3  # Stricter than dev/staging
PROD_CIRCUIT_RESET_TIMEOUT=600  # 10 minutes

# ============================================================================
# TEST ENVIRONMENT (Automated Testing - Pytest)
# ============================================================================

# PostgreSQL Database - Test
TEST_DB_HOST=localhost
TEST_DB_PORT=5432
TEST_DB_NAME=precog_test
TEST_DB_USER=test_user
TEST_DB_PASSWORD=test_password

# Kalshi API - Test (Mock Mode)
TEST_KALSHI_API_KEY=test_api_key
TEST_KALSHI_PRIVATE_KEY_PATH=_keys/kalshi_demo_private.pem  # Reuse demo key
TEST_KALSHI_BASE_URL=https://demo-api.kalshi.co

# Test Settings
TEST_LOG_LEVEL=ERROR  # Only errors during tests
TEST_DEBUG_MODE=False
TEST_MOCK_API_MODE=True  # ALWAYS mock in tests
TEST_PAPER_TRADING_MODE=True

# Test Coverage Requirements
TEST_PYTEST_COVERAGE_MIN=80

# ============================================================================
# SHARED CONFIGURATION (All Environments)
# ============================================================================

# Application Metadata
APP_NAME=Precog
APP_VERSION=0.1.0

# Logging Configuration (Override per environment if needed)
LOG_FILE_PATH=/var/log/precog/precog.log
LOG_MAX_BYTES=10485760  # 10MB
LOG_BACKUP_COUNT=5

# API Rate Limiting (Kalshi default)
API_RATE_LIMIT=100  # Requests per minute
RATE_LIMIT_BACKOFF=exponential

# Circuit Breaker Defaults (Override in PROD for stricter limits)
CIRCUIT_BREAKER_ENABLED=True
MAX_API_FAILURES=5
CIRCUIT_RESET_TIMEOUT=300  # 5 minutes

# ============================================================================
# PHASE 6: MULTI-SPORT EXPANSION (Apply prefixes when ready)
# ============================================================================

# MLB Data Source (TBD Phase 6)
# DEV_MLB_DATA_SOURCE=espn
# STAGING_MLB_DATA_SOURCE=espn
# PROD_MLB_DATA_SOURCE=espn

# Tennis API (TBD Phase 6 - research required)
# DEV_TENNIS_API_KEY=your_dev_tennis_api_key
# DEV_TENNIS_API_BASE=https://api.tennisdata.com
# STAGING_TENNIS_API_KEY=your_staging_tennis_api_key
# PROD_TENNIS_API_KEY=your_prod_tennis_api_key

# UFC Data (Phase 6)
# DEV_UFC_DATA_SOURCE=espn
# STAGING_UFC_DATA_SOURCE=espn
# PROD_UFC_DATA_SOURCE=espn

# ============================================================================
# PHASE 8: NON-SPORTS MARKETS (Apply prefixes when ready)
# ============================================================================

# RealClearPolling API (Political Markets)
# DEV_RCP_API_KEY=your_dev_rcp_api_key
# DEV_RCP_API_BASE=https://api.realclearpolitics.com
# PROD_RCP_API_KEY=your_prod_rcp_api_key

# FiveThirtyEight API (Political Markets)
# DEV_FIVETHIRTYEIGHT_API_KEY=your_dev_538_api_key
# DEV_FIVETHIRTYEIGHT_API_BASE=https://api.fivethirtyeight.com
# PROD_FIVETHIRTYEIGHT_API_KEY=your_prod_538_api_key

# Box Office Mojo API (Entertainment Markets)
# DEV_BOXOFFICE_API_KEY=your_dev_boxoffice_api_key
# DEV_BOXOFFICE_API_BASE=https://api.boxofficemojo.com
# PROD_BOXOFFICE_API_KEY=your_prod_boxoffice_api_key

# Twitter API (Sentiment Analysis)
# DEV_TWITTER_API_KEY=your_dev_twitter_api_key
# DEV_TWITTER_API_SECRET=your_dev_twitter_api_secret
# DEV_TWITTER_BEARER_TOKEN=your_dev_twitter_bearer_token
# PROD_TWITTER_API_KEY=your_prod_twitter_api_key
# PROD_TWITTER_API_SECRET=your_prod_twitter_api_secret
# PROD_TWITTER_BEARER_TOKEN=your_prod_twitter_bearer_token

# News API (Sentiment Analysis)
# DEV_NEWS_API_KEY=your_dev_news_api_key
# DEV_NEWS_API_BASE=https://newsapi.org/v2
# PROD_NEWS_API_KEY=your_prod_news_api_key

# ============================================================================
# PHASE 10: MULTI-PLATFORM (Apply prefixes when ready)
# ============================================================================

# Polymarket API (Blockchain-based prediction market)
# DEV_POLYMARKET_API_KEY=your_dev_polymarket_api_key
# DEV_POLYMARKET_PRIVATE_KEY=your_dev_polymarket_private_key
# DEV_POLYMARKET_CLOB_BASE=https://clob.polymarket.com
# DEV_POLYMARKET_GAMMA_BASE=https://gamma-api.polymarket.com
# PROD_POLYMARKET_API_KEY=your_prod_polymarket_api_key
# PROD_POLYMARKET_PRIVATE_KEY=your_prod_polymarket_private_key

# Ethereum RPC (for Polymarket)
# DEV_ETH_RPC_URL=https://polygon-mumbai.infura.io/v3/your_project_id  # Testnet
# DEV_ETH_CHAIN_ID=80001  # Mumbai testnet
# PROD_ETH_RPC_URL=https://polygon-mainnet.infura.io/v3/your_project_id  # Mainnet
# PROD_ETH_CHAIN_ID=137  # Polygon mainnet

# ============================================================================
# PHASE 7: WEB DASHBOARD (Optional - Apply prefixes when ready)
# ============================================================================

# JWT Secret for Dashboard Authentication
# DEV_JWT_SECRET=dev_jwt_secret_min_32_chars
# PROD_JWT_SECRET=prod_jwt_secret_CHANGE_THIS_min_32_chars

# Dashboard Configuration
# DEV_DASHBOARD_BASE_URL=http://localhost:3000
# DEV_API_BASE_URL=http://localhost:8000
# PROD_DASHBOARD_BASE_URL=https://dashboard.precog.com
# PROD_API_BASE_URL=https://api.precog.com

# Email Notifications (Optional - for alerts)
# DEV_SMTP_HOST=smtp.gmail.com
# DEV_SMTP_PORT=587
# DEV_SMTP_USER=dev@example.com
# DEV_SMTP_PASSWORD=dev_app_password
# DEV_ALERT_EMAIL=dev_alerts@example.com
# PROD_SMTP_USER=alerts@precog.com
# PROD_SMTP_PASSWORD=prod_app_password
# PROD_ALERT_EMAIL=alerts@precog.com

# ============================================================================
# SECURITY & BEST PRACTICES
# ============================================================================

# ✅ DO:
# 1. Copy this file to .env: cp config/env.template .env
# 2. Fill in actual credentials in .env (NEVER commit .env)
# 3. Use strong, unique passwords (16+ characters)
# 4. Rotate credentials quarterly
# 5. Keep RSA keys in _keys/ folder (not in .env)
# 6. Use ENVIRONMENT=development as default
# 7. Test in staging before production
# 8. Start with paper trading in production

# ❌ DON'T:
# 1. Commit .env file to git
# 2. Share credentials via email/Slack
# 3. Use production credentials in development
# 4. Set ENVIRONMENT=production without validation
# 5. Disable circuit breakers in production
# 6. Use DEBUG_MODE=True in production
# 7. Skip paper trading validation

# ============================================================================
# ENVIRONMENT SWITCHING GUIDE
# ============================================================================

# To switch environments, change ENVIRONMENT variable:
#
# Development (default):
#   ENVIRONMENT=development
#
# Staging (pre-production validation):
#   ENVIRONMENT=staging
#
# Production (⚠️ live trading):
#   ENVIRONMENT=production
#
# Testing (pytest):
#   ENVIRONMENT=test
#
# Config loader will automatically use {ENV}_ prefixed variables
# Example: If ENVIRONMENT=staging, uses STAGING_DB_NAME, STAGING_KALSHI_API_KEY, etc.

# ============================================================================
# VALIDATION CHECKLIST BEFORE PRODUCTION
# ============================================================================

# Before setting ENVIRONMENT=production:
# [ ] 30+ days of paper trading validation with positive results
# [ ] Staging environment tested and validated
# [ ] Security review completed (run SECURITY_REVIEW_CHECKLIST.md)
# [ ] All credentials rotated (don't reuse dev/staging creds)
# [ ] Circuit breakers tested (verify they trigger correctly)
# [ ] Risk limits validated (start conservative, increase slowly)
# [ ] Database backups configured
# [ ] Monitoring and alerting configured
# [ ] Reviewed CLAUDE.md Section 8 (Security Guidelines)
# [ ] Reviewed CLAUDE.md Section 9 (Phase Completion Protocol)

# ============================================================================
# END OF TEMPLATE
# ============================================================================
